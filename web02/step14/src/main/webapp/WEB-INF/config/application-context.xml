<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

  <!-- component-scan 태그는 다음 작업을 수행하는 객체를 생성한다. 
      1) 지정한 패키지 및 하위 패키지를 뒤져서 @Component 애노테이션이 붙은 클래스를 찾는다.
      2) 그 클래스의 객체를 생성한다. -->
  <context:component-scan base-package="net.bitacademy.spring"></context:component-scan>

  <!-- @Transactional 애노테이션을 처리할 객체 투입! -->
  <tx:annotation-driven transaction-manager="txManager"/>
  
  <!-- 필터를 꼽을 메서드의 이름을 지정한다. -->  
  <tx:advice id="txAdvice" transaction-manager="txManager">
      <tx:attributes>
          <tx:method name="get*" propagation="NOT_SUPPORTED"/>
          <tx:method name="list*" read-only="true"/>
          <tx:method name="*" propagation="REQUIRED"/>
      </tx:attributes>
  </tx:advice>  
  
  <!-- 필터 꼽기 -->
  <aop:config>
     <!-- 필터를 꼽을 대상 지정하기 -->
     <aop:pointcut id="serviceOperation" 
       expression="execution(* net.bitacademy.spring.service..*Service.*(..))"/>
     <aop:advisor pointcut-ref="serviceOperation" advice-ref="txAdvice"/>
  </aop:config>
  
    
  <!-- mybatis 관련 객체 준비 -->
  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/studydb"/>
    <property name="username" value="study"/>
    <property name="password" value="study"/>
  </bean>

  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	  <property name="dataSource" ref="dataSource" />
	  <property name="typeAliasesPackage" value="net.bitacademy.spring.vo" />
	  <property name="mapperLocations" value="classpath*:net/bitacademy/spring/dao/*Dao.xml" />
	</bean>

	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- DAO 자동 생성기 
	   => DAO 인터페이스를 찾아서 그 일을 할 객체를 준비한다.
	-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	  <property name="basePackage" value="net.bitacademy.spring.dao" />
	</bean>
  
  <!-- 기존의 view resolver 교체  -->
  <bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
    <property name="prefix" value="/WEB-INF/views/"/>
    <property name="suffix" value=".jsp"/>
  </bean>
  
  <!-- 멀티파트 요청 데이터를 분해하는 일을 하는 객체를 등록한다. -->
  <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <property name="maxUploadSize" value="10000000"/>
	</bean>
</beans>









